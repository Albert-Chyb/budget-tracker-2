create type "public"."category_type" as enum ('income', 'expense');

create table "public"."transactions_categories" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "type" category_type not null,
    "colorId" bigint,
    "ownerId" uuid not null
);


alter table "public"."transactions_categories" enable row level security;

CREATE UNIQUE INDEX transactions_categories_id_key ON public.transactions_categories USING btree (id);

CREATE UNIQUE INDEX transactions_categories_pkey ON public.transactions_categories USING btree (id);

alter table "public"."transactions_categories" add constraint "transactions_categories_pkey" PRIMARY KEY using index "transactions_categories_pkey";

alter table "public"."transactions_categories" add constraint "transactions_categories_colorId_fkey" FOREIGN KEY ("colorId") REFERENCES categories_colors("colorId") ON UPDATE CASCADE not valid;

alter table "public"."transactions_categories" validate constraint "transactions_categories_colorId_fkey";

alter table "public"."transactions_categories" add constraint "transactions_categories_id_key" UNIQUE using index "transactions_categories_id_key";

alter table "public"."transactions_categories" add constraint "transactions_categories_ownerId_fkey" FOREIGN KEY ("ownerId") REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."transactions_categories" validate constraint "transactions_categories_ownerId_fkey";

grant delete on table "public"."transactions_categories" to "anon";

grant insert on table "public"."transactions_categories" to "anon";

grant references on table "public"."transactions_categories" to "anon";

grant select on table "public"."transactions_categories" to "anon";

grant trigger on table "public"."transactions_categories" to "anon";

grant truncate on table "public"."transactions_categories" to "anon";

grant update on table "public"."transactions_categories" to "anon";

grant delete on table "public"."transactions_categories" to "authenticated";

grant insert on table "public"."transactions_categories" to "authenticated";

grant references on table "public"."transactions_categories" to "authenticated";

grant select on table "public"."transactions_categories" to "authenticated";

grant trigger on table "public"."transactions_categories" to "authenticated";

grant truncate on table "public"."transactions_categories" to "authenticated";

grant update on table "public"."transactions_categories" to "authenticated";

grant delete on table "public"."transactions_categories" to "service_role";

grant insert on table "public"."transactions_categories" to "service_role";

grant references on table "public"."transactions_categories" to "service_role";

grant select on table "public"."transactions_categories" to "service_role";

grant trigger on table "public"."transactions_categories" to "service_role";

grant truncate on table "public"."transactions_categories" to "service_role";

grant update on table "public"."transactions_categories" to "service_role";

create policy "User can modify his own categories"
on "public"."transactions_categories"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = "ownerId"));



